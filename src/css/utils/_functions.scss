////
/// Functions
/// @group utils
////


///
/// Accepts two or three parameters.
///
/// @param {Color} $from - Start Color
/// @param {Color} $to - End Color
/// @param {String} $direction [to bottom] - Gradient direction
///
/// @example scss - Two parameters
///   background-image: gradient(white, black);
///   // background-image: linear-gradient(to bottom, white 0%, black 100%);
///
/// @example scss - Three parameters
///   background-image: gradient(black, white, to top);
///   // background-image: linear-gradient(to top, black 0%, white 100%);
///
/// @return {String} Linear Gradient snippet
///
/// @throw Error if no parameters are passed.
///
@function gradient($from, $to, $direction: "to bottom") {

    @if( length($from) == 0 or length($to) == 0 ) {
        @error "gradient() expects two or three parameters.";
    }

    @return linear-gradient(#{$direction}, #{$from} 0%, #{$to} 100%);

}


///
/// Define Opacity
///
/// @param {String} $value - Value of the opacity (0-1) or respective label
///
/// @require {Variable} $opacities
///
/// @example scss
///   @include opacity(1);
///   // opacity: 1;
///
/// @example scss
///   opacity: opacity("10-percent");
///   // opacity: 0.10;
///
/// @return {Number} Opacity value
///
/// @throw Error if no parameters are passed.
///
@function opacity($value) {

    @if( length($value) == 0 ) {
        @error "opacity() expects one parameter."
    }

    @if map-has-key($opacities, $value) {
        @return map-get($opacities, $value);
    }

    @return $value;

}


///
/// Simplify z-index.
///
/// @param {String} $value - Generic level
///
/// @require {Variable} $z-indexes
///
/// @require {Variable} $z-indexes
///
/// @example scss
///   z-index: z-index(above);
///   // z-index: 2;
///
/// @return {Number} Z Index
///
/// @throw Error if no parameters are passed.
/// @throw Error if parameter passed does not match a key in $z-indexes.
///
@function z-index($value) {

    @if( length($value) == 0 ) {
        @error "z-index() expects at least one parameter."
    }

    @if not map-has-key($z-indexes, $value) {
        @error "There is no layer named `#{$value}` in $z-indexes. Layer should be one of #{map-keys($z-indexes)}.";
    }

    @return map-get($z-indexes, $value);

}


///
/// Contrasting Text Color
///
/// @param {Color} $background-color - Background Color to contrast
/// @param {Color} $text-color-light [$color-white] - Color to use for dark backgrounds
/// @param {Color} $text-color-dark [$color-black] - Color to use for light backgrounds
///
/// @example scss
///   background-color: #111111;
///   color: contrasting-color(#111111);
///   // background-color: #111111;
///   // color: #f8f8f8;
///
/// @return {Color} Contrasting Text Color
///
/// @throw Error if no parameters are passed.
///
@function contrasting-color($background-color, $text-color-dark: $color-text, $text-color-light: $color-white) {

    @if( length($background-color) == 0 ) {
        @error "contrasting-color() expects at least one parameter.";
    }

    @if (lightness($background-color) > 65) {
        @return $text-color-dark;
    } @else {
        @return $text-color-light;
    }

}


///
/// Strip Units from a Number
///
/// @param {Number} $value - Number with units
///
/// @example scss
///   line-height: strip-units(2em);
///   // line-height: 2;
///
/// @return {Number} Number without units
///
/// @throw Error if no parameter is passed.
///
@function strip-units($value) {

    @if( length($value) == 0 ) {
        @error "strip-units() expects at least one parameter."
    }

    @return $value / ($value * 0 + 1);

}
